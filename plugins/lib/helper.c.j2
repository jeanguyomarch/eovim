/*
 * Copyright (c) 2018 Jean Guyomarc'h
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "plugin_{{ plugin.name }}.h"
#include <Eovim.h>

int EOVIM_PLUGIN_LOG_DOM;

/* Stringshares -------------------------------------------------------------*/
{%- for stringshare in stringshares %}
Eina_Stringshare *S_{{ stringshare.name }};
{%- endfor %}

EAPI Eina_Bool
eovim_plugin_{{ plugin.name }}_init(void)
{
  /***************************************************************************/
  /* Eina Log Configuration                                                  */
  EOVIM_PLUGIN_LOG_DOM =
    eina_log_domain_register("{{ plugin.name }}", EINA_COLOR_GREEN);
  if (EINA_UNLIKELY(EOVIM_PLUGIN_LOG_DOM < 0))
  {
    EINA_LOG_CRIT("Failed to create log domain for the eovim {{ plugin.name }} plugin");
    return EINA_FALSE;
  }

  /***************************************************************************/
  /* Stringshares Initialization                                             */
  {%- for stringshare in stringshares %}
  S_{{ stringshare.name }} = eina_stringshare_add_length(
    "{{ stringshare.value }}", {{ stringshare.value | length }});
  {%- endfor %}

  return EINA_TRUE;
}

EAPI void
eovim_plugin_{{ plugin.name }}_shutdown(void)
{
  {%- for stringshare in stringshares %}
  eina_stringshare_del(S_{{ stringshare.name }});
  {%- endfor %}

  eina_log_domain_unregister(EOVIM_PLUGIN_LOG_DOM);
  EOVIM_PLUGIN_LOG_DOM = -1;
}


EAPI Eina_Hash *
eovim_plugin_{{ plugin.name }}_parse(const msgpack_object_array *args)
{
  Eina_Hash *const params = eina_hash_stringshared_new(NULL);

  for (unsigned int i = 1u; i < args->size; i++)
  {
    /* Iterate over the list of arguments */
    const msgpack_object_array *const arr =
       EOVIM_MSGPACK_ARRAY_EXTRACT(&(args->ptr[i]), fail);
    for (unsigned int j = 0u; j < arr->size; j++)
    {
      /* Extract key-value object from the arguments */
      const msgpack_object *const obj = &(arr->ptr[j]);
      const msgpack_object_map *const map =
         EOVIM_MSGPACK_MAP_EXTRACT(obj, fail);

      /* Go through the arguments passed to the map */
      const msgpack_object *key_obj, *val_obj;
      size_t it;
      EOVIM_MSGPACK_MAP_ITER(map, it, key_obj, val_obj)
      {
        Eina_Stringshare *const key =
          EOVIM_MSGPACK_STRING_EXTRACT(key_obj, fail);
        {% for key in plugin.params %}
        /* Handle the "{{ key }}" keyword parameter */
        {% if not loop.first %}else {% endif %}if (key == S_{{ key | upper }})
        {
          Eina_Stringshare *const val =
            EOVIM_MSGPACK_STRING_EXTRACT(val_obj, fail);
          eina_hash_direct_add(params, S_{{ key | upper }}, val);
        }
        {%- endfor %}
        /* Unknown parameter: ERROR */
        else
        { ERR("Invalid keyword '%s'", key); }
      }
    }
  }

  return params;

fail:
  ERR("Arguments decoding error");
  eina_hash_free(params);
  return NULL;
}
