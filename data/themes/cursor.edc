/* This file is part of Eovim, which is under the MIT License ****************/

/*
 * CURSOR: show where the text is being typed.
 * NOTE: This group is mostly inspired from Terminology's cursor:
 * https://www.enlightenment.org/about-terminology
 */
group { "eovim/cursor";
   script {
      public g_blink_on, g_blink_off, g_blink_wait;
      public g_timer, g_anim;
      public g_may_blink;

      public message(Msg_Type:type, id, ...) {
         if (id == 0) { /* blink set */
            set_float(g_blink_wait, getfarg(2));
            set_float(g_blink_on, getfarg(3));
            set_float(g_blink_off, getfarg(4));
         } else if (id == 1) { /* color set */
            new r = getarg(2);
            new g = getarg(3);
            new b = getarg(4);

            /* Set all the color classes used by the cursor */
            set_color_class("cursor_off", r, g, b, 0);
            set_color_class("cursor_on", r, g, b, 255);
            set_color_class("cursor_dimmed", r, g, b, 40);
            set_color_class("cursor_dimmed2", r, g, b, 80);
            //set_color_class("cursor_full", r, g, b, 255);
         } else if (id == 2) { /* may blink set */
            set_int(g_may_blink, getarg(2));
         }
      }

      /* Blink start is the embryo program that triggers the blinking chain. */
      public blink_start() {
         /* We will start the animation after g_blink_wait secs */
         new Float:start_in = get_float(g_blink_wait);

         /* Get the current state of one of the cursor part (they are all in
          * sync, so it does not matter which one. If its state is "focused",
          * then the cursor in "on", and we must start with the blink_off
          * animation.  Otherwise, the cursor is "off", we start with the
          * blink_on animation */
         new state[32];
         new Float:val;
         get_state(PART:"glow", state, 32, val);
         new timer_id;
         if (strcmp(state, "focused") == 0) {
             timer_id = timer(start_in, "blink_off", 0);
         } else {
             timer_id = timer(start_in, "blink_on", 0);
         }
         /* Keep the timer around so we can stop it later */
         set_int(g_timer, timer_id);
      }

      public blink_stop() {
         /* Stop pending timers and animations. */
         new anim_id = get_int(g_anim);
         new timer_id = get_int(g_timer);

         set_int(g_may_blink, 0);
         cancel_anim(anim_id);
         cancel_timer(timer_id);

         /* Show the cursor by setting its parts to "focused" (ON) */
         set_state(PART:"glow",  "focused", 0.0);
         set_state(PART:"outline", "focused", 0.0);
      }

      /*======================================================================*/
      /* Blink ON                                                             */
      public blink_on_anim(val, Float:pos) {
         set_tween_state(PART:"glow", pos, "default", 0.0, "focused", 0.0);
         set_tween_state(PART:"outline", pos, "default", 0.0, "focused", 0.0);
      }
      public blink_on() {
         new may_blink = get_int(g_may_blink);
         if (may_blink) {
           new anim_id = anim(0.2, "blink_on_anim", 0);
           set_int(g_anim, anim_id);
         }

         new Float:start_in = get_float(g_blink_off);
         new timer_id = timer(start_in, "blink_off", 0);
         set_int(g_timer, timer_id);
      }
      /*======================================================================*/


      /*======================================================================*/
      /* Blink OFF                                                            */
      public blink_off_anim(val, Float:pos) {
         set_tween_state(PART:"glow", pos, "focused", 0.0, "default", 0.0);
         set_tween_state(PART:"outline", pos, "focused", 0.0, "default", 0.0);
      }
      public blink_off() {
         new may_blink = get_int(g_may_blink);
         if (may_blink) {
           new anim_id = anim(0.4, "blink_off_anim", 0);
           set_int(g_anim, anim_id);
         }

         new Float:start_in = get_float(g_blink_on);
         new timer_id = timer(start_in, "blink_on", 0);
         set_int(g_timer, timer_id);
      }
      /*======================================================================*/
   }
   images {
      image: "cr_key.png" COMP;
      image: "cr_out.png" COMP;
      image: "cr_glow.png" COMP;
   }
   parts {
      part { name: "key"; nomouse;
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
               to: "outline";
               offset: -5 -5;
            }
            rel2 {
               to: "outline";
               offset: 4 4;
            }
            image {
               normal: "cr_key.png";
               border: 4 4 4 4;
            }
            color_class: "cursor_off";
         }
         description { state: "on" 0.0;
            inherit: "default" 0.0;
            color_class: "cursor_on";
         }
         description { state: "out" 0.0;
            inherit: "default" 0.0;
            rel1.offset: -7 -15;
            rel2.offset: 6 14;
         }
      }
      part { name: "glow"; nomouse;
         description { state: "default" 0.0;
            rel1.offset: -4 -4;
            rel2.offset: 3 3;
            image {
               normal: "cr_glow.png";
               border: 9 9 9 9;
            }
            color_class: "cursor_dimmed";
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color_class: "cursor_on";
         }
      }
      part { name: "outline";
         mouse_events: 0;
         description { state: "default" 0.0;
            image {
               normal: "cr_out.png";
               border: 3 3 3 3;
            }
            color_class: "cursor_dimmed2";
         }
         description { state: "focused" 0.0;
            inherit: "default" 0.0;
            color_class: "cursor_full";
         }
      }
      programs {
         program {
            signal: "focus,in"; source: "eovim";
            action: STATE_SET "focused" 0.0;
            target: "glow";
            target: "outline";
         }


         program { signal: "eovim,blink,stop"; source: "eovim";
            script {
               blink_stop();
            }
         }
         program { signal: "eovim,blink,start"; source: "eovim";
            script {
               blink_start();
            }
         }

         program {
            signal: "focus,out"; source: "eovim";
            script {
               blink_stop();
            }
            after: "focus_out2";
         }
         program { name: "focus_out2";
            action: STATE_SET "default" 0.0;
            target: "glow";
            target: "outline";
         }
         program {
            signal: "key,down"; source: "eovim";
            action: STATE_SET "default" 0.0;
            target: "key";
            after: "key2";
         }
         program { name: "key2";
            action: STATE_SET "on" 0.0;
            target: "key";
            after: "key3";
         }
         program { name: "key3";
            action: STATE_SET "out" 0.0;
            transition: DECELERATE 0.3;
            target: "key";
         }
      }
   }
}
